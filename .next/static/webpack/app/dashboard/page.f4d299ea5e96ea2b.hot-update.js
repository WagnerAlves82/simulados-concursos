"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/lib/adminService.ts":
/*!*********************************!*\
  !*** ./src/lib/adminService.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminService: function() { return /* binding */ AdminService; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n// src/lib/adminService.ts\n\nclass AdminService {\n    /**\r\n   * Buscar estatísticas gerais do dashboard\r\n   */ async buscarEstatisticas() {\n        try {\n            // 1. Total de questões\n            const { count: totalQuestoes } = await this.supabase.from(\"questoes\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            // 2. Total de cargos\n            const { count: totalCargos } = await this.supabase.from(\"cargos\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            // 3. Total de usuários\n            const { count: totalUsuarios } = await this.supabase.from(\"profiles\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            // 4. Total de simulados\n            const { count: totalSimulados } = await this.supabase.from(\"simulados\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            // 5. Questões por banca - usando queries separadas\n            const { data: questoes } = await this.supabase.from(\"questoes\").select(\"cargo_id\").eq(\"ativo\", true);\n            const cargoIds = [\n                ...new Set(questoes === null || questoes === void 0 ? void 0 : questoes.map((q)=>q.cargo_id))\n            ];\n            const { data: cargos } = await this.supabase.from(\"cargos\").select(\"id, banca\").in(\"id\", cargoIds);\n            const questoesPorBanca = {};\n            questoes === null || questoes === void 0 ? void 0 : questoes.forEach((q)=>{\n                const cargo = cargos === null || cargos === void 0 ? void 0 : cargos.find((c)=>c.id === q.cargo_id);\n                const banca = (cargo === null || cargo === void 0 ? void 0 : cargo.banca) || \"Desconhecida\";\n                questoesPorBanca[banca] = (questoesPorBanca[banca] || 0) + 1;\n            });\n            // 6. Questões por área - usando queries separadas\n            const areaIds = [\n                ...new Set(questoes === null || questoes === void 0 ? void 0 : questoes.map((q)=>q.area_id).filter((id)=>id !== null && id !== undefined))\n            ];\n            const { data: areas } = await this.supabase.from(\"areas_conhecimento\").select(\"id, nome\").in(\"id\", areaIds);\n            const questoesPorArea = {};\n            questoes === null || questoes === void 0 ? void 0 : questoes.forEach((q)=>{\n                if (q.area_id) {\n                    const area = areas === null || areas === void 0 ? void 0 : areas.find((a)=>a.id === q.area_id);\n                    const areaName = (area === null || area === void 0 ? void 0 : area.nome) || \"\\xc1rea Desconhecida\";\n                    questoesPorArea[areaName] = (questoesPorArea[areaName] || 0) + 1;\n                }\n            });\n            // 7. Acessos recentes (últimos 7 dias)\n            const seteDiasAtras = new Date();\n            seteDiasAtras.setDate(seteDiasAtras.getDate() - 7);\n            const { count: acessosRecentes } = await this.supabase.from(\"profiles\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).gte(\"ultimo_acesso\", seteDiasAtras.toISOString());\n            return {\n                totalQuestoes: totalQuestoes || 0,\n                totalCargos: totalCargos || 0,\n                totalUsuarios: totalUsuarios || 0,\n                totalSimulados: totalSimulados || 0,\n                questoesPorBanca,\n                questoesPorArea,\n                acessosRecentes: acessosRecentes || 0\n            };\n        } catch (error) {\n            console.error(\"Erro ao buscar estat\\xedsticas:\", error);\n            throw new Error(\"Erro ao carregar estat\\xedsticas do dashboard\");\n        }\n    }\n    /**\r\n   * Buscar todos os cargos com detalhes\r\n   */ async buscarCargos() {\n        try {\n            const { data: cargos, error } = await this.supabase.from(\"cargos\").select(\"*\").order(\"nome\");\n            if (error) throw error;\n            // Buscar contagem de questões para cada cargo separadamente\n            const cargosComQuestoes = await Promise.all((cargos || []).map(async (cargo)=>{\n                const { count } = await this.supabase.from(\"questoes\").select(\"*\", {\n                    count: \"exact\",\n                    head: true\n                }).eq(\"cargo_id\", cargo.id).eq(\"ativo\", true);\n                return {\n                    ...cargo,\n                    questoes_count: count || 0\n                };\n            }));\n            return cargosComQuestoes;\n        } catch (error) {\n            console.error(\"Erro ao buscar cargos:\", error);\n            throw new Error(\"Erro ao carregar cargos\");\n        }\n    }\n    /**\r\n   * Buscar todas as áreas de conhecimento\r\n   */ async buscarAreas() {\n        try {\n            const { data, error } = await this.supabase.from(\"areas_conhecimento\").select(\"*\").order(\"nome\");\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao buscar \\xe1reas:\", error);\n            throw new Error(\"Erro ao carregar \\xe1reas de conhecimento\");\n        }\n    }\n    /**\r\n   * Buscar bancas com estatísticas\r\n   */ async buscarBancas() {\n        try {\n            // Buscar bancas únicas dos cargos\n            const { data: cargosData } = await this.supabase.from(\"cargos\").select(\"banca\").order(\"banca\");\n            const bancasUnicas = [\n                ...new Set(cargosData === null || cargosData === void 0 ? void 0 : cargosData.map((c)=>c.banca))\n            ];\n            const bancasDetalhadas = [];\n            for (const banca of bancasUnicas){\n                // Buscar IDs dos cargos desta banca\n                const { data: cargosDaBanca } = await this.supabase.from(\"cargos\").select(\"id\").eq(\"banca\", banca);\n                const cargoIds = (cargosDaBanca === null || cargosDaBanca === void 0 ? void 0 : cargosDaBanca.map((c)=>c.id)) || [];\n                // Contar questões da banca\n                const { count: questoes } = await this.supabase.from(\"questoes\").select(\"*\", {\n                    count: \"exact\",\n                    head: true\n                }).in(\"cargo_id\", cargoIds).eq(\"ativo\", true);\n                // Contar cargos da banca\n                const { count: cargos } = await this.supabase.from(\"cargos\").select(\"*\", {\n                    count: \"exact\",\n                    head: true\n                }).eq(\"banca\", banca);\n                bancasDetalhadas.push({\n                    nome: banca,\n                    questoes: questoes || 0,\n                    cargos: cargos || 0,\n                    ativa: true\n                });\n            }\n            return bancasDetalhadas;\n        } catch (error) {\n            console.error(\"Erro ao buscar bancas:\", error);\n            throw new Error(\"Erro ao carregar bancas\");\n        }\n    }\n    /**\r\n   * Criar nova questão\r\n   */ async criarQuestao(questaoData) {\n        try {\n            const { data, error } = await this.supabase.from(\"questoes\").insert({\n                ...questaoData,\n                ativo: true,\n                dificuldade: questaoData.dificuldade || 2\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Erro ao criar quest\\xe3o:\", error);\n            throw new Error(\"Erro ao criar quest\\xe3o\");\n        }\n    }\n    /**\r\n   * Buscar questões com filtros\r\n   */ async buscarQuestoes(filtros) {\n        try {\n            let query = this.supabase.from(\"questoes\").select(\"\\n          *,\\n          cargos(nome),\\n          areas_conhecimento(nome)\\n        \").eq(\"ativo\", true).order(\"created_at\", {\n                ascending: false\n            });\n            if (filtros.cargo_id) {\n                query = query.eq(\"cargo_id\", filtros.cargo_id);\n            }\n            if (filtros.area_id) {\n                query = query.eq(\"area_id\", filtros.area_id);\n            }\n            if (filtros.busca) {\n                query = query.ilike(\"enunciado\", \"%\".concat(filtros.busca, \"%\"));\n            }\n            if (filtros.limit) {\n                query = query.limit(filtros.limit);\n            }\n            if (filtros.offset) {\n                query = query.range(filtros.offset, filtros.offset + (filtros.limit || 10) - 1);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao buscar quest\\xf5es:\", error);\n            throw new Error(\"Erro ao buscar quest\\xf5es\");\n        }\n    }\n    /**\r\n   * Deletar questão\r\n   */ async deletarQuestao(id) {\n        try {\n            const { error } = await this.supabase.from(\"questoes\").update({\n                ativo: false\n            }).eq(\"id\", id);\n            if (error) throw error;\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao deletar quest\\xe3o:\", error);\n            throw new Error(\"Erro ao deletar quest\\xe3o\");\n        }\n    }\n    /**\r\n   * Criar novo cargo\r\n   */ async criarCargo(cargoData) {\n        try {\n            const { data, error } = await this.supabase.from(\"cargos\").insert({\n                ...cargoData,\n                ativo: true\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Erro ao criar cargo:\", error);\n            throw new Error(\"Erro ao criar cargo\");\n        }\n    }\n    /**\r\n   * Exportar questões em CSV\r\n   */ async exportarQuestoes(cargo_id) {\n        try {\n            let query = this.supabase.from(\"questoes\").select(\"\\n          *,\\n          cargos(nome),\\n          areas_conhecimento(nome)\\n        \").eq(\"ativo\", true);\n            if (cargo_id) {\n                query = query.eq(\"cargo_id\", cargo_id);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            // Converter para CSV\n            const csvData = data === null || data === void 0 ? void 0 : data.map((q)=>{\n                var _q_cargos, _q_areas_conhecimento;\n                return {\n                    id: q.id,\n                    cargo: (_q_cargos = q.cargos) === null || _q_cargos === void 0 ? void 0 : _q_cargos.nome,\n                    area: (_q_areas_conhecimento = q.areas_conhecimento) === null || _q_areas_conhecimento === void 0 ? void 0 : _q_areas_conhecimento.nome,\n                    enunciado: q.enunciado,\n                    alternativa_a: q.alternativa_a,\n                    alternativa_b: q.alternativa_b,\n                    alternativa_c: q.alternativa_c,\n                    alternativa_d: q.alternativa_d,\n                    alternativa_e: q.alternativa_e,\n                    resposta_correta: q.resposta_correta,\n                    feedback: q.feedback,\n                    dificuldade: q.dificuldade,\n                    fonte: q.fonte\n                };\n            });\n            return csvData || [];\n        } catch (error) {\n            console.error(\"Erro ao exportar quest\\xf5es:\", error);\n            throw new Error(\"Erro ao exportar quest\\xf5es\");\n        }\n    }\n    constructor(){\n        this.supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/adminService.ts\n"));

/***/ })

});