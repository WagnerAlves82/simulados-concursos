"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/simulado/page",{

/***/ "(app-pages-browser)/./src/lib/questoesServices.ts":
/*!*************************************!*\
  !*** ./src/lib/questoesServices.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuestoesService: function() { return /* binding */ QuestoesService; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n// src/lib/questoesServices.ts - VERSÃO CORRIGIDA\n\n// CONFIGURAÇÃO DO LIMITE GRATUITO\nconst LIMITE_QUESTOES_GRATUITAS = 3;\nclass QuestoesService {\n    // Método auxiliar para verificar login\n    async isUsuarioLogado() {\n        try {\n            const { data: { user }, error } = await this.supabase.auth.getUser();\n            return !error && !!user;\n        } catch (error) {\n            return false;\n        }\n    }\n    async buscarCargos() {\n        try {\n            const { data: cargos, error } = await this.supabase.from(\"cargos\").select(\"id, nome, descricao, nivel_escolaridade, banca\").eq(\"ativo\", true).order(\"nome\");\n            if (error) {\n                console.error(\"Erro ao buscar cargos:\", error);\n                throw new Error(error.message);\n            }\n            return cargos || [];\n        } catch (error) {\n            console.error(\"Erro ao buscar cargos:\", error);\n            throw error;\n        }\n    }\n    async buscarQuestoesPorCargo(cargoId) {\n        if (!cargoId) throw new Error(\"cargoId \\xe9 obrigat\\xf3rio\");\n        try {\n            console.log(\"Iniciando busca por cargoId:\", cargoId);\n            // 1. Buscar TODAS as questões\n            const { data: questoes, error: questoesError } = await this.supabase.from(\"questoes\").select(\"*\").eq(\"cargo_id\", cargoId).eq(\"ativo\", true).order(\"area_id\").order(\"id\");\n            if (questoesError) {\n                console.error(\"Erro na query de quest\\xf5es:\", questoesError);\n                throw new Error(questoesError.message);\n            }\n            if (!questoes || questoes.length === 0) {\n                console.log(\"Nenhuma quest\\xe3o encontrada para o cargo:\", cargoId);\n                return {\n                    questoes: [],\n                    areas: [],\n                    total: 0\n                };\n            }\n            console.log(\"Quest\\xf5es encontradas: \".concat(questoes.length));\n            // 2. Buscar áreas - CORRIGIDO (evita problema com .in())\n            const areaIds = [\n                ...new Set(questoes.map((q)=>q.area_id).filter((id)=>id !== null))\n            ];\n            console.log(\"Area IDs a buscar:\", areaIds);\n            const { data: areas, error: areasError } = await this.supabase.from(\"areas_conhecimento\").select(\"*\");\n            // Filtrar apenas as áreas que têm questões\n            const areasComQuestoes = (areas === null || areas === void 0 ? void 0 : areas.filter((area)=>areaIds.includes(area.id))) || [];\n            // ADICIONAR verificação de erro:\n            if (areasError) {\n                console.error(\"Erro ao buscar \\xe1reas:\", areasError);\n                throw new Error(\"Erro ao buscar \\xe1reas: \".concat(areasError.message));\n            }\n            console.log(\"Todas as \\xe1reas do banco:\", areas);\n            console.log(\"\\xc1reas filtradas com quest\\xf5es:\", areasComQuestoes);\n            const { data: cargoAreas, error: cargoAreasError } = await this.supabase.from(\"cargo_areas\").select(\"*\").eq(\"cargo_id\", cargoId);\n            if (cargoAreasError) {\n                console.warn(\"Erro ao buscar cargo_areas:\", cargoAreasError);\n            }\n            // 3. Criar mapas para relacionamento - CORRIGIDO\n            const areaMap = areas && areas.length > 0 ? areas.reduce((acc, area)=>{\n                acc[area.id] = area.nome;\n                return acc;\n            }, {}) : {};\n            console.log(\"Area map criado:\", areaMap);\n            const cargoAreaMap = (cargoAreas === null || cargoAreas === void 0 ? void 0 : cargoAreas.reduce((acc, ca)=>{\n                acc[ca.area_id] = {\n                    numero_questoes: ca.numero_questoes,\n                    peso: ca.peso || 1.0\n                };\n                return acc;\n            }, {})) || {};\n            // 4. Montar questões completas - CORRIGIDO\n            const questoesCompletas = questoes.map((q)=>{\n                var _cargoAreaMap_q_area_id;\n                return {\n                    ...q,\n                    area_nome: areaMap[q.area_id] || \"\\xc1rea Desconhecida\",\n                    peso_area: ((_cargoAreaMap_q_area_id = cargoAreaMap[q.area_id]) === null || _cargoAreaMap_q_area_id === void 0 ? void 0 : _cargoAreaMap_q_area_id.peso) || 1.0\n                };\n            });\n            // 5. Montar estatísticas das áreas - CORRIGIDO\n            // 5. Montar estatísticas das áreas - CORRIGIDO\n            let areasEstatisticas;\n            if (cargoAreas && cargoAreas.length > 0) {\n                areasEstatisticas = cargoAreas.map((ca)=>{\n                    // CONTAR QUESTÕES REAIS EM VEZ DE USAR VALOR FIXO\n                    const questoesDaArea = questoes.filter((q)=>q.area_id === ca.area_id);\n                    return {\n                        id: ca.area_id,\n                        nome: areaMap[ca.area_id] || \"\\xc1rea Desconhecida\",\n                        total_questoes: questoesDaArea.length,\n                        peso: ca.peso || 1.0,\n                        questoes_respondidas: 0,\n                        acertos: 0,\n                        percentual: 0\n                    };\n                });\n            } else {\n                areasEstatisticas = areaIds.map((areaId)=>{\n                    const questoesDaArea = questoes.filter((q)=>q.area_id === areaId);\n                    return {\n                        id: areaId,\n                        nome: areaMap[areaId] || \"\\xc1rea Desconhecida\",\n                        total_questoes: questoesDaArea.length,\n                        peso: 1.0,\n                        questoes_respondidas: 0,\n                        acertos: 0,\n                        percentual: 0\n                    };\n                });\n            }\n            console.log(\"Busca conclu\\xedda: \".concat(questoesCompletas.length, \" quest\\xf5es, \").concat(areasEstatisticas.length, \" \\xe1reas\"));\n            return {\n                questoes: questoesCompletas,\n                areas: areasEstatisticas,\n                total: questoes.length\n            };\n        } catch (error) {\n            console.error(\"Erro geral ao buscar quest\\xf5es:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Gera um simulado personalizado baseado na distribuição por área e dificuldade\r\n   */ async gerarSimuladoPersonalizado(cargoId) {\n        let dificuldades = arguments.length > 1 && arguments[1] !== void 0 // Níveis de dificuldade a incluir\n         ? arguments[1] : [\n            1,\n            2,\n            3\n        ];\n        try {\n            console.log(\"Iniciando gera\\xe7\\xe3o do simulado para cargo:\", cargoId, \"dificuldades:\", dificuldades);\n            // 1. Buscar TODAS as questões do cargo com filtro de dificuldade\n            const { data: todasQuestoes, error: questoesError } = await this.supabase.from(\"questoes\").select(\"*\").eq(\"cargo_id\", cargoId).eq(\"ativo\", true).in(\"dificuldade\", dificuldades);\n            if (questoesError) {\n                console.error(\"Erro ao buscar quest\\xf5es:\", questoesError);\n                throw new Error(questoesError.message);\n            }\n            if (!todasQuestoes || todasQuestoes.length === 0) {\n                console.warn(\"Nenhuma quest\\xe3o encontrada para o cargo e dificuldades especificadas\");\n                return [];\n            }\n            console.log(\"Total de quest\\xf5es dispon\\xedveis: \".concat(todasQuestoes.length));\n            // 2. Buscar configuração de cargo_areas\n            const { data: cargoAreas, error: configError } = await this.supabase.from(\"cargo_areas\").select(\"area_id, numero_questoes\").eq(\"cargo_id\", cargoId);\n            if (configError) {\n                console.error(\"Erro ao buscar configura\\xe7\\xe3o:\", configError);\n            }\n            console.log(\"Configura\\xe7\\xf5es encontradas: \".concat((cargoAreas === null || cargoAreas === void 0 ? void 0 : cargoAreas.length) || 0));\n            // 3. Buscar dados complementares para questões completas - CORRIGIDO\n            const areaIds = [\n                ...new Set(todasQuestoes.map((q)=>q.area_id).filter((id)=>id !== null))\n            ];\n            const { data: areas, error: areasError } = await this.supabase.from(\"areas_conhecimento\").select(\"*\");\n            // Filtrar apenas as áreas necessárias\n            const areasComQuestoes = (areas === null || areas === void 0 ? void 0 : areas.filter((area)=>areaIds.includes(area.id))) || [];\n            if (areasError) {\n                console.error(\"Erro ao buscar \\xe1reas para simulado:\", areasError);\n            }\n            const { data: configAreas } = await this.supabase.from(\"cargo_areas\").select(\"*\").eq(\"cargo_id\", cargoId);\n            // Criar mapas - CORRIGIDO\n            const areaMap = areasComQuestoes && areasComQuestoes.length > 0 ? areasComQuestoes.reduce((acc, area)=>{\n                acc[area.id] = area.nome;\n                return acc;\n            }, {}) : {};\n            const pesoMap = (configAreas === null || configAreas === void 0 ? void 0 : configAreas.reduce((acc, config)=>{\n                acc[config.area_id] = config.peso || 1.0;\n                return acc;\n            }, {})) || {};\n            // Montar questões completas - CORRIGIDO\n            const questoesCompletas = todasQuestoes.map((q)=>({\n                    ...q,\n                    area_nome: areaMap[q.area_id] || \"\\xc1rea Desconhecida\",\n                    peso_area: pesoMap[q.area_id] || 1.0\n                }));\n            let questoesSimulado = [];\n            // 4. Se não há configuração, usar distribuição simples com mistura de dificuldades\n            if (!cargoAreas || cargoAreas.length === 0) {\n                console.log(\"Sem configura\\xe7\\xe3o espec\\xedfica, misturando quest\\xf5es por dificuldade\");\n                // Separar questões por dificuldade\n                const questoesPorDificuldade = dificuldades.reduce((acc, nivel)=>{\n                    acc[nivel] = questoesCompletas.filter((q)=>q.dificuldade === nivel);\n                    return acc;\n                }, {});\n                // Calcular quantas questões de cada dificuldade incluir\n                const totalDesejado = Math.min(120, questoesCompletas.length);\n                const questoesPorNivel = Math.floor(totalDesejado / dificuldades.length);\n                const resto = totalDesejado % dificuldades.length;\n                dificuldades.forEach((nivel, index)=>{\n                    const quantidade = questoesPorNivel + (index < resto ? 1 : 0);\n                    const disponíveis = questoesPorDificuldade[nivel] || [];\n                    const embaralhadas = this.embaralharArray(disponíveis);\n                    questoesSimulado.push(...embaralhadas.slice(0, quantidade));\n                });\n                questoesSimulado = this.embaralharArray(questoesSimulado);\n            } else {\n                // 5. Usar configuração específica por área, misturando dificuldades dentro de cada área\n                for (const config of cargoAreas){\n                    const questoesDaArea = questoesCompletas.filter((q)=>q.area_id === config.area_id);\n                    console.log(\"\\xc1rea \".concat(config.area_id, \": \").concat(questoesDaArea.length, \" quest\\xf5es dispon\\xedveis, \").concat(config.numero_questoes, \" solicitadas\"));\n                    if (questoesDaArea.length > 0) {\n                        // Separar por dificuldade dentro da área\n                        const questoesPorDificuldade = dificuldades.reduce((acc, nivel)=>{\n                            acc[nivel] = questoesDaArea.filter((q)=>q.dificuldade === nivel);\n                            return acc;\n                        }, {});\n                        // Distribuir questões da área proporcionalmente entre dificuldades\n                        const questoesDaAreaSelecionadas = [];\n                        const questoesPorNivel = Math.floor(config.numero_questoes / dificuldades.length);\n                        const resto = config.numero_questoes % dificuldades.length;\n                        dificuldades.forEach((nivel, index)=>{\n                            const quantidade = questoesPorNivel + (index < resto ? 1 : 0);\n                            const disponíveis = questoesPorDificuldade[nivel] || [];\n                            const embaralhadas = this.embaralharArray(disponíveis);\n                            questoesDaAreaSelecionadas.push(...embaralhadas.slice(0, quantidade));\n                        });\n                        questoesSimulado.push(...questoesDaAreaSelecionadas);\n                        console.log(\"Selecionadas \".concat(questoesDaAreaSelecionadas.length, \" quest\\xf5es da \\xe1rea \").concat(config.area_id));\n                    }\n                }\n                questoesSimulado = this.embaralharArray(questoesSimulado);\n            }\n            const simuladoFinal = questoesSimulado;\n            console.log(\"Simulado final gerado: \".concat(simuladoFinal.length, \" quest\\xf5es\"));\n            console.log(\"Distribui\\xe7\\xe3o por \\xe1rea:\", simuladoFinal.reduce((acc, q)=>{\n                acc[q.area_nome] = (acc[q.area_nome] || 0) + 1;\n                return acc;\n            }, {}));\n            return simuladoFinal;\n        } catch (error) {\n            console.error(\"Erro ao gerar simulado:\", error);\n            throw error;\n        }\n    }\n    // Método para verificar se usuário deve ver modal\n    async deveExibirModalLogin(questoesRespondidas) {\n        const isLogado = await this.isUsuarioLogado();\n        if (isLogado || questoesRespondidas < LIMITE_QUESTOES_GRATUITAS) {\n            return {\n                exibirModal: false,\n                beneficios: [],\n                questoesTotais: 0,\n                questoesLiberadas: 0\n            };\n        }\n        return {\n            exibirModal: true,\n            beneficios: [\n                \"Acesso completo a todas as quest\\xf5es do simulado\",\n                \"Relat\\xf3rios detalhados de desempenho por \\xe1rea\",\n                \"Cron\\xf4metro e controle de tempo personalizado\",\n                \"Acompanhamento de evolu\\xe7\\xe3o e estat\\xedsticas\",\n                \"Hist\\xf3rico completo de simulados realizados\",\n                \"Quest\\xf5es sempre atualizadas conforme o edital\",\n                \"Sincroniza\\xe7\\xe3o entre dispositivos\",\n                \"Coment\\xe1rios detalhados com explica\\xe7\\xf5es das regras\"\n            ],\n            questoesTotais: 0,\n            questoesLiberadas: LIMITE_QUESTOES_GRATUITAS\n        };\n    }\n    async testarConexao() {\n        try {\n            console.log(\"Testando conex\\xe3o com Supabase...\");\n            const { data, error } = await this.supabase.from(\"questoes\").select(\"id\").limit(1);\n            if (error) {\n                console.error(\"Erro de conex\\xe3o:\", error);\n                throw error;\n            }\n            console.log(\"Conex\\xe3o bem-sucedida\");\n            return true;\n        } catch (error) {\n            console.error(\"Erro geral na conex\\xe3o:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Busca questões de uma área específica\r\n   */ async buscarQuestoesPorArea(cargoId, areaId, limite) {\n        try {\n            let questoesQuery = this.supabase.from(\"questoes\").select(\"*\").eq(\"cargo_id\", cargoId).eq(\"area_id\", areaId).eq(\"ativo\", true).order(\"id\");\n            if (limite) {\n                questoesQuery = questoesQuery.limit(limite);\n            }\n            const { data: questoes, error: questoesError } = await questoesQuery;\n            if (questoesError) throw new Error(questoesError.message);\n            if (!questoes || questoes.length === 0) {\n                return [];\n            }\n            // Buscar nome da área - CORRIGIDO\n            const { data: area, error: areaError } = await this.supabase.from(\"areas_conhecimento\").select(\"nome\").eq(\"id\", areaId).single();\n            if (areaError) {\n                console.warn(\"Erro ao buscar nome da \\xe1rea:\", areaError);\n            }\n            // Buscar peso da área\n            const { data: cargoArea, error: cargoAreaError } = await this.supabase.from(\"cargo_areas\").select(\"peso\").eq(\"cargo_id\", cargoId).eq(\"area_id\", areaId).single();\n            if (cargoAreaError) {\n                console.warn(\"Erro ao buscar configura\\xe7\\xe3o da \\xe1rea:\", cargoAreaError);\n            }\n            // Montar questões completas - CORRIGIDO\n            const questoesCompletas = questoes.map((q)=>({\n                    ...q,\n                    area_nome: (area === null || area === void 0 ? void 0 : area.nome) || \"\\xc1rea Desconhecida\",\n                    peso_area: (cargoArea === null || cargoArea === void 0 ? void 0 : cargoArea.peso) || 1.0\n                }));\n            return questoesCompletas;\n        } catch (error) {\n            console.error(\"Erro ao buscar quest\\xf5es por \\xe1rea:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Busca estatísticas de desempenho por área para um usuário\r\n   */ async buscarEstatisticasUsuario(userId, cargoId) {\n        try {\n            // Buscar estatísticas\n            const { data: stats, error: statsError } = await this.supabase.from(\"estatisticas_areas\").select(\"*\").eq(\"user_id\", userId).eq(\"cargo_id\", cargoId);\n            if (statsError) throw new Error(statsError.message);\n            if (!stats || stats.length === 0) return [];\n            // Buscar nomes das áreas - CORRIGIDO\n            const areaIds = stats.map((s)=>s.area_id).filter((id)=>id !== null);\n            const { data: areas, error: areasError } = await this.supabase.from(\"areas_conhecimento\").select(\"*\").in(\"id\", areaIds);\n            if (areasError) {\n                console.warn(\"Erro ao buscar \\xe1reas:\", areasError);\n            }\n            // Buscar pesos das áreas\n            const { data: cargoAreas, error: cargoAreasError } = await this.supabase.from(\"cargo_areas\").select(\"*\").eq(\"cargo_id\", cargoId).in(\"area_id\", areaIds);\n            if (cargoAreasError) {\n                console.warn(\"Erro ao buscar configura\\xe7\\xe3o das \\xe1reas:\", cargoAreasError);\n            }\n            // Criar mapas - CORRIGIDO\n            const areaMap = areas && areas.length > 0 ? areas.reduce((acc, area)=>{\n                acc[area.id] = area.nome;\n                return acc;\n            }, {}) : {};\n            const pesoMap = (cargoAreas === null || cargoAreas === void 0 ? void 0 : cargoAreas.reduce((acc, config)=>{\n                acc[config.area_id] = config.peso || 1.0;\n                return acc;\n            }, {})) || {};\n            // Montar estatísticas - CORRIGIDO\n            return stats.map((s)=>({\n                    id: s.area_id,\n                    nome: areaMap[s.area_id] || \"\\xc1rea Desconhecida\",\n                    total_questoes: s.total_questoes || 0,\n                    peso: pesoMap[s.area_id] || 1.0,\n                    questoes_respondidas: s.total_questoes || 0,\n                    acertos: s.acertos || 0,\n                    percentual: s.percentual || 0\n                }));\n        } catch (error) {\n            console.error(\"Erro ao buscar estat\\xedsticas:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Salva resultado de simulado\r\n   */ async salvarResultadoSimulado(userId, cargoId, questoes, respostas, tempoGasto) {\n        try {\n            let pontuacaoTotal = 0;\n            let pesoTotal = 0;\n            let acertos = 0;\n            questoes.forEach((q)=>{\n                pesoTotal += q.peso_area;\n                if (respostas[q.id] === q.resposta_correta) {\n                    acertos++;\n                    pontuacaoTotal += q.peso_area;\n                }\n            });\n            const percentualAcertos = acertos / questoes.length * 100;\n            const { data: simulado, error: simuladoError } = await this.supabase.from(\"simulados\").insert({\n                user_id: userId,\n                cargo_id: cargoId,\n                tipo: \"personalizado\",\n                status: \"concluido\",\n                data_conclusao: new Date().toISOString(),\n                tempo_gasto: tempoGasto,\n                pontuacao_total: pontuacaoTotal,\n                percentual_acertos: percentualAcertos\n            }).select(\"id\").single();\n            if (simuladoError) throw new Error(simuladoError.message);\n            const questoesSimulado = questoes.map((q, index)=>({\n                    simulado_id: simulado.id,\n                    questao_id: q.id,\n                    ordem: index + 1,\n                    resposta_usuario: respostas[q.id] || null,\n                    correta: respostas[q.id] === q.resposta_correta,\n                    tempo_resposta: Math.floor(tempoGasto / questoes.length)\n                }));\n            const { error: questoesError } = await this.supabase.from(\"simulado_questoes\").insert(questoesSimulado);\n            if (questoesError) throw new Error(questoesError.message);\n            await this.atualizarEstatisticasAreas(userId, cargoId, questoes, respostas);\n            return simulado.id;\n        } catch (error) {\n            console.error(\"Erro ao salvar resultado:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Atualiza estatísticas por área\r\n   */ async atualizarEstatisticasAreas(userId, cargoId, questoes, respostas) {\n        const questoesPorArea = questoes.reduce((acc, q)=>{\n            if (!acc[q.area_id]) {\n                acc[q.area_id] = [];\n            }\n            acc[q.area_id].push(q);\n            return acc;\n        }, {});\n        for (const [areaId, questoesDaArea] of Object.entries(questoesPorArea)){\n            const areaIdNum = parseInt(areaId);\n            const acertos = questoesDaArea.filter((q)=>respostas[q.id] === q.resposta_correta).length;\n            const total = questoesDaArea.length;\n            const { data: estatisticaExistente } = await this.supabase.from(\"estatisticas_areas\").select(\"*\").eq(\"user_id\", userId).eq(\"cargo_id\", cargoId).eq(\"area_id\", areaIdNum).single();\n            if (estatisticaExistente) {\n                const novoTotal = (estatisticaExistente.total_questoes || 0) + total;\n                const novosAcertos = (estatisticaExistente.acertos || 0) + acertos;\n                const novoPercentual = novosAcertos / novoTotal * 100;\n                await this.supabase.from(\"estatisticas_areas\").update({\n                    total_questoes: novoTotal,\n                    acertos: novosAcertos,\n                    percentual: novoPercentual,\n                    ultima_atualizacao: new Date().toISOString()\n                }).eq(\"id\", estatisticaExistente.id);\n            } else {\n                const percentual = acertos / total * 100;\n                await this.supabase.from(\"estatisticas_areas\").insert({\n                    user_id: userId,\n                    cargo_id: cargoId,\n                    area_id: areaIdNum,\n                    total_questoes: total,\n                    acertos,\n                    percentual\n                });\n            }\n        }\n    }\n    embaralharArray(array) {\n        const embaralhado = [\n            ...array\n        ];\n        for(let i = embaralhado.length - 1; i > 0; i--){\n            const j = Math.floor(Math.random() * (i + 1));\n            [embaralhado[i], embaralhado[j]] = [\n                embaralhado[j],\n                embaralhado[i]\n            ];\n        }\n        return embaralhado;\n    }\n    constructor(){\n        this.supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/questoesServices.ts\n"));

/***/ })

});